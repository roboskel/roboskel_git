#include <ros/ros.h>
#include "std_msgs/String.h"
#include <tf/transform_listener.h>
#include <tf/transform_broadcaster.h>
#include <signal.h>
#include <stdio.h>
#include <std_msgs/Float64.h>
#include <sstream>
#include "std_msgs/Float64MultiArray.h"
 

int main(int argc, char** argv){
  ros::init(argc, argv, "head_cor_publisher");

  ros::NodeHandle node;
  ros::Publisher cord_publ = 
       node.advertise<geometry_msgs::Vector3>("head_cords", 1000,false);
  tf::TransformListener listener;

  ros::Rate rate(10.0);
  while (node.ok()){
	ros::spinOnce();
    tf::StampedTransform transform;
    try{
      listener.lookupTransform("head_1", "/openni_depth_frame",  
                               ros::Time(0), transform);
    }
    catch (tf::TransformException ex){
      ROS_ERROR("%s",ex.what());
    }
	
    geometry_msgs::Vector3 cord;
    cord.x = transform.getOrigin().x();
    cord.y = transform.getOrigin().y();
    cord.z = transform.getOrigin().z(); 
	
    printf("*********\n");
	printf("%f \n",cord.x);
	printf("%f \n",cord.y);
	printf("%f \n",cord.z);
	printf("*********\n");
    cord_publ.publish(cord);
    ros::Duration(0.5).sleep();
 	
    //rate.sleep();
  }
  return 0;
};
