"""autogenerated by genpy from rn_face/hcma.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rn_face.msg

class hcma(genpy.Message):
  _md5sum = "5965750697474fb92efa297d80e9d602"
  _type = "rn_face/hcma"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """hcm[] head_co

================================================================================
MSG: rn_face/hcm
int64 timestamp
int64 id
int8[10] x
int8[10] y
int8[10] z

"""
  __slots__ = ['head_co']
  _slot_types = ['rn_face/hcm[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       head_co

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(hcma, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.head_co is None:
        self.head_co = []
    else:
      self.head_co = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.head_co)
      buff.write(_struct_I.pack(length))
      for val1 in self.head_co:
        _x = val1
        buff.write(_struct_2q.pack(_x.timestamp, _x.id))
        buff.write(_struct_10b.pack(*val1.x))
        buff.write(_struct_10b.pack(*val1.y))
        buff.write(_struct_10b.pack(*val1.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.head_co is None:
        self.head_co = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.head_co = []
      for i in range(0, length):
        val1 = rn_face.msg.hcm()
        _x = val1
        start = end
        end += 16
        (_x.timestamp, _x.id,) = _struct_2q.unpack(str[start:end])
        start = end
        end += 10
        val1.x = _struct_10b.unpack(str[start:end])
        start = end
        end += 10
        val1.y = _struct_10b.unpack(str[start:end])
        start = end
        end += 10
        val1.z = _struct_10b.unpack(str[start:end])
        self.head_co.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.head_co)
      buff.write(_struct_I.pack(length))
      for val1 in self.head_co:
        _x = val1
        buff.write(_struct_2q.pack(_x.timestamp, _x.id))
        buff.write(val1.x.tostring())
        buff.write(val1.y.tostring())
        buff.write(val1.z.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.head_co is None:
        self.head_co = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.head_co = []
      for i in range(0, length):
        val1 = rn_face.msg.hcm()
        _x = val1
        start = end
        end += 16
        (_x.timestamp, _x.id,) = _struct_2q.unpack(str[start:end])
        start = end
        end += 10
        val1.x = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=10)
        start = end
        end += 10
        val1.y = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=10)
        start = end
        end += 10
        val1.z = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=10)
        self.head_co.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_10b = struct.Struct("<10b")
_struct_2q = struct.Struct("<2q")
