"""autogenerated by genpy from rn_face/hcm.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class hcm(genpy.Message):
  _md5sum = "eba503a94c55b57a103896678be7b05a"
  _type = "rn_face/hcm"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int64 timestamp
int64 id
int8[10] x
int8[10] y
int8[10] z

"""
  __slots__ = ['timestamp','id','x','y','z']
  _slot_types = ['int64','int64','int8[10]','int8[10]','int8[10]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,id,x,y,z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(hcm, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0
      if self.id is None:
        self.id = 0
      if self.x is None:
        self.x = [0,0,0,0,0,0,0,0,0,0]
      if self.y is None:
        self.y = [0,0,0,0,0,0,0,0,0,0]
      if self.z is None:
        self.z = [0,0,0,0,0,0,0,0,0,0]
    else:
      self.timestamp = 0
      self.id = 0
      self.x = [0,0,0,0,0,0,0,0,0,0]
      self.y = [0,0,0,0,0,0,0,0,0,0]
      self.z = [0,0,0,0,0,0,0,0,0,0]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2q.pack(_x.timestamp, _x.id))
      buff.write(_struct_10b.pack(*self.x))
      buff.write(_struct_10b.pack(*self.y))
      buff.write(_struct_10b.pack(*self.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.timestamp, _x.id,) = _struct_2q.unpack(str[start:end])
      start = end
      end += 10
      self.x = _struct_10b.unpack(str[start:end])
      start = end
      end += 10
      self.y = _struct_10b.unpack(str[start:end])
      start = end
      end += 10
      self.z = _struct_10b.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2q.pack(_x.timestamp, _x.id))
      buff.write(self.x.tostring())
      buff.write(self.y.tostring())
      buff.write(self.z.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.timestamp, _x.id,) = _struct_2q.unpack(str[start:end])
      start = end
      end += 10
      self.x = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=10)
      start = end
      end += 10
      self.y = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=10)
      start = end
      end += 10
      self.z = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=10)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_10b = struct.Struct("<10b")
_struct_2q = struct.Struct("<2q")
