/* Auto-generated by genmsg_cpp for file /home/skel/roboskel_workspace/sandbox/rn_face/msg/head_cords_m_array.msg */
#ifndef RN_FACE_MESSAGE_HEAD_CORDS_M_ARRAY_H
#define RN_FACE_MESSAGE_HEAD_CORDS_M_ARRAY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "rn_face/head_cords_m.h"

namespace rn_face
{
template <class ContainerAllocator>
struct head_cords_m_array_ {
  typedef head_cords_m_array_<ContainerAllocator> Type;

  head_cords_m_array_()
  : head_co()
  {
  }

  head_cords_m_array_(const ContainerAllocator& _alloc)
  : head_co(_alloc)
  {
  }

  typedef std::vector< ::rn_face::head_cords_m_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rn_face::head_cords_m_<ContainerAllocator> >::other >  _head_co_type;
  std::vector< ::rn_face::head_cords_m_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rn_face::head_cords_m_<ContainerAllocator> >::other >  head_co;


  typedef boost::shared_ptr< ::rn_face::head_cords_m_array_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rn_face::head_cords_m_array_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct head_cords_m_array
typedef  ::rn_face::head_cords_m_array_<std::allocator<void> > head_cords_m_array;

typedef boost::shared_ptr< ::rn_face::head_cords_m_array> head_cords_m_arrayPtr;
typedef boost::shared_ptr< ::rn_face::head_cords_m_array const> head_cords_m_arrayConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rn_face::head_cords_m_array_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rn_face::head_cords_m_array_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rn_face

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rn_face::head_cords_m_array_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rn_face::head_cords_m_array_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rn_face::head_cords_m_array_<ContainerAllocator> > {
  static const char* value() 
  {
    return "389fffe2ce004da6b2e2a56f91e2a9c5";
  }

  static const char* value(const  ::rn_face::head_cords_m_array_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x389fffe2ce004da6ULL;
  static const uint64_t static_value2 = 0xb2e2a56f91e2a9c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::rn_face::head_cords_m_array_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rn_face/head_cords_m_array";
  }

  static const char* value(const  ::rn_face::head_cords_m_array_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rn_face::head_cords_m_array_<ContainerAllocator> > {
  static const char* value() 
  {
    return "head_cords_m[] head_co\n\
\n\
================================================================================\n\
MSG: rn_face/head_cords_m\n\
int64 timestamp\n\
int64 id\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::rn_face::head_cords_m_array_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rn_face::head_cords_m_array_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.head_co);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct head_cords_m_array_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rn_face::head_cords_m_array_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rn_face::head_cords_m_array_<ContainerAllocator> & v) 
  {
    s << indent << "head_co[]" << std::endl;
    for (size_t i = 0; i < v.head_co.size(); ++i)
    {
      s << indent << "  head_co[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rn_face::head_cords_m_<ContainerAllocator> >::stream(s, indent + "    ", v.head_co[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // RN_FACE_MESSAGE_HEAD_CORDS_M_ARRAY_H

