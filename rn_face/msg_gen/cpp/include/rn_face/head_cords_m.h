/* Auto-generated by genmsg_cpp for file /home/skel/roboskel_workspace/sandbox/rn_face/msg/head_cords_m.msg */
#ifndef RN_FACE_MESSAGE_HEAD_CORDS_M_H
#define RN_FACE_MESSAGE_HEAD_CORDS_M_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace rn_face
{
template <class ContainerAllocator>
struct head_cords_m_ {
  typedef head_cords_m_<ContainerAllocator> Type;

  head_cords_m_()
  : timestamp(0)
  , id(0)
  , x(0.0)
  , y(0.0)
  , z(0.0)
  {
  }

  head_cords_m_(const ContainerAllocator& _alloc)
  : timestamp(0)
  , id(0)
  , x(0.0)
  , y(0.0)
  , z(0.0)
  {
  }

  typedef int64_t _timestamp_type;
  int64_t timestamp;

  typedef int64_t _id_type;
  int64_t id;

  typedef double _x_type;
  double x;

  typedef double _y_type;
  double y;

  typedef double _z_type;
  double z;


  typedef boost::shared_ptr< ::rn_face::head_cords_m_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rn_face::head_cords_m_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct head_cords_m
typedef  ::rn_face::head_cords_m_<std::allocator<void> > head_cords_m;

typedef boost::shared_ptr< ::rn_face::head_cords_m> head_cords_mPtr;
typedef boost::shared_ptr< ::rn_face::head_cords_m const> head_cords_mConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rn_face::head_cords_m_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rn_face::head_cords_m_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rn_face

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rn_face::head_cords_m_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rn_face::head_cords_m_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rn_face::head_cords_m_<ContainerAllocator> > {
  static const char* value() 
  {
    return "598d8408e66cd18ea5a95f216f92089b";
  }

  static const char* value(const  ::rn_face::head_cords_m_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x598d8408e66cd18eULL;
  static const uint64_t static_value2 = 0xa5a95f216f92089bULL;
};

template<class ContainerAllocator>
struct DataType< ::rn_face::head_cords_m_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rn_face/head_cords_m";
  }

  static const char* value(const  ::rn_face::head_cords_m_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rn_face::head_cords_m_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 timestamp\n\
int64 id\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::rn_face::head_cords_m_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rn_face::head_cords_m_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rn_face::head_cords_m_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.timestamp);
    stream.next(m.id);
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.z);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct head_cords_m_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rn_face::head_cords_m_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rn_face::head_cords_m_<ContainerAllocator> & v) 
  {
    s << indent << "timestamp: ";
    Printer<int64_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
  }
};


} // namespace message_operations
} // namespace ros

#endif // RN_FACE_MESSAGE_HEAD_CORDS_M_H

