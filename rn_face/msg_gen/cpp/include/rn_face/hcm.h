/* Auto-generated by genmsg_cpp for file /home/skel/roboskel_workspace/sandbox/rn_face/msg/hcm.msg */
#ifndef RN_FACE_MESSAGE_HCM_H
#define RN_FACE_MESSAGE_HCM_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace rn_face
{
template <class ContainerAllocator>
struct hcm_ {
  typedef hcm_<ContainerAllocator> Type;

  hcm_()
  : timestamp(0)
  , id(0)
  , x()
  , y()
  , z()
  {
    x.assign(0);
    y.assign(0);
    z.assign(0);
  }

  hcm_(const ContainerAllocator& _alloc)
  : timestamp(0)
  , id(0)
  , x()
  , y()
  , z()
  {
    x.assign(0);
    y.assign(0);
    z.assign(0);
  }

  typedef int64_t _timestamp_type;
  int64_t timestamp;

  typedef int64_t _id_type;
  int64_t id;

  typedef boost::array<int8_t, 10>  _x_type;
  boost::array<int8_t, 10>  x;

  typedef boost::array<int8_t, 10>  _y_type;
  boost::array<int8_t, 10>  y;

  typedef boost::array<int8_t, 10>  _z_type;
  boost::array<int8_t, 10>  z;


  typedef boost::shared_ptr< ::rn_face::hcm_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rn_face::hcm_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct hcm
typedef  ::rn_face::hcm_<std::allocator<void> > hcm;

typedef boost::shared_ptr< ::rn_face::hcm> hcmPtr;
typedef boost::shared_ptr< ::rn_face::hcm const> hcmConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rn_face::hcm_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rn_face::hcm_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rn_face

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rn_face::hcm_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rn_face::hcm_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rn_face::hcm_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eba503a94c55b57a103896678be7b05a";
  }

  static const char* value(const  ::rn_face::hcm_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xeba503a94c55b57aULL;
  static const uint64_t static_value2 = 0x103896678be7b05aULL;
};

template<class ContainerAllocator>
struct DataType< ::rn_face::hcm_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rn_face/hcm";
  }

  static const char* value(const  ::rn_face::hcm_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rn_face::hcm_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 timestamp\n\
int64 id\n\
int8[10] x\n\
int8[10] y\n\
int8[10] z\n\
\n\
";
  }

  static const char* value(const  ::rn_face::hcm_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rn_face::hcm_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rn_face::hcm_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.timestamp);
    stream.next(m.id);
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.z);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct hcm_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rn_face::hcm_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rn_face::hcm_<ContainerAllocator> & v) 
  {
    s << indent << "timestamp: ";
    Printer<int64_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.y[i]);
    }
    s << indent << "z[]" << std::endl;
    for (size_t i = 0; i < v.z.size(); ++i)
    {
      s << indent << "  z[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.z[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // RN_FACE_MESSAGE_HCM_H

